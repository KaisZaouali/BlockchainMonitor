// <auto-generated />
using System;
using BlockchainMonitor.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlockchainMonitor.Infrastructure.Migrations
{
    [DbContext(typeof(BlockchainDbContext))]
    [Migration("20250729220540_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("BlockchainMonitor.Domain.Entities.BlockchainData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("BaseFee")
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "base_fee");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<long>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("HighFeePerKb")
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "high_fee_per_kb");

                    b.Property<long?>("HighGasPrice")
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "high_gas_price");

                    b.Property<long?>("HighPriorityFee")
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "high_priority_fee");

                    b.Property<string>("LastForkHash")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "last_fork_hash");

                    b.Property<long?>("LastForkHeight")
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "last_fork_height");

                    b.Property<string>("LatestUrl")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "latest_url");

                    b.Property<long?>("LowFeePerKb")
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "low_fee_per_kb");

                    b.Property<long?>("LowGasPrice")
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "low_gas_price");

                    b.Property<long?>("LowPriorityFee")
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "low_priority_fee");

                    b.Property<long?>("MediumFeePerKb")
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "medium_fee_per_kb");

                    b.Property<long?>("MediumGasPrice")
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "medium_gas_price");

                    b.Property<long?>("MediumPriorityFee")
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "medium_priority_fee");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("PeerCount")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "peer_count");

                    b.Property<string>("PreviousHash")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "previous_hash");

                    b.Property<string>("PreviousUrl")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "previous_url");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT");

                    b.Property<int>("UnconfirmedCount")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "unconfirmed_count");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Name");

                    b.ToTable("BlockchainData");
                });
#pragma warning restore 612, 618
        }
    }
}
