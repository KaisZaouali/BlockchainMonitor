name: BlockchainMonitor-prod

services:
  # Redis Server
  redis:
    image: redis:7-alpine
    container_name: blockchainmonitor-redis-prod
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'

  # RabbitMQ Server
  rabbitmq:
    image: rabbitmq:3-management
    container_name: blockchainmonitor-rabbitmq-prod
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS:-guest}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - network
    restart: unless-stopped

  # Database Migration Service
  migrate:
    image: mcr.microsoft.com/dotnet/sdk:8.0
    container_name: blockchainmonitor-migrate-prod
    working_dir: /app
    volumes:
      - ..:/app
      - blockchain_data:/app/data
    entrypoint: >
      sh -c "
        dotnet tool install --global dotnet-ef --version 8.0.0 &&
        dotnet restore BlockchainMonitor.Domain &&
        dotnet restore BlockchainMonitor.Application &&
        dotnet restore BlockchainMonitor.Infrastructure &&
        dotnet restore BlockchainMonitor.API &&
        /root/.dotnet/tools/dotnet-ef database update --project BlockchainMonitor.API --connection 'Data Source=/app/data/blockchain-prod.db'
      "
    networks:
      - network

  # API Gateway Service
  gateway:
    build:
      context: ..
      dockerfile: docker/BlockchainMonitor.Gateway/Dockerfile
    container_name: blockchainmonitor-gateway-prod
    ports:
      - "80:80"
      - "443:443"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__Redis=redis:6379
    depends_on:
      migrate:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # API Service (Scaled)
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      args:
        TARGET_PROJECT: BlockchainMonitor.API
    container_name: blockchainmonitor-api-prod
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=Data Source=/app/data/blockchain-prod.db
      - ConnectionStrings__Redis=redis:6379
      - RABBITMQ__HOSTNAME=rabbitmq
      - RABBITMQ__USERNAME=${RABBITMQ_USER:-guest}
      - RABBITMQ__PASSWORD=${RABBITMQ_PASS:-guest}
      - RABBITMQ__PORT=5672
    volumes:
      - blockchain_data:/app/data
    depends_on:
      migrate:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # DataFetcher Service
  datafetcher:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      args:
        TARGET_PROJECT: BlockchainMonitor.DataFetcher
    container_name: blockchainmonitor-datafetcher-prod
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=Data Source=/app/data/blockchain-prod.db
      - ConnectionStrings__Redis=redis:6379
      - RABBITMQ__HOSTNAME=rabbitmq
      - RABBITMQ__USERNAME=${RABBITMQ_USER:-guest}
      - RABBITMQ__PASSWORD=${RABBITMQ_PASS:-guest}
      - RABBITMQ__PORT=5672
    volumes:
      - blockchain_data:/app/data
    depends_on:
      migrate:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "ps", "aux", "|", "grep", "BlockchainMonitor.DataFetcher"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Dashboard Service
  dashboard:
    image: python:3.11-alpine
    container_name: blockchainmonitor-dashboard-prod
    ports:
      - "8080:8000"
    volumes:
      - ../monitoring:/app
    working_dir: /app
    command: sh -c "cd /app && python -m http.server 8000 --bind 0.0.0.0"
    depends_on:
      gateway:
        condition: service_started
    networks:
      - network
    restart: unless-stopped

volumes:
  rabbitmq_data:
    driver: local
  blockchain_data:
    driver: local

networks:
  network:
    driver: bridge 